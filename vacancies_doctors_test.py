#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –Ω–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
1. API –≤–∞–∫–∞–Ω—Å–∏–π (–Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–∞—á–µ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import sys
import json
from datetime import datetime
import uuid

class VacanciesDoctorsAPITester:
    def __init__(self, base_url=None):
        # Read the backend URL from the frontend .env file
        if base_url is None:
            try:
                with open('/app/frontend/.env', 'r') as f:
                    for line in f:
                        if line.startswith('REACT_APP_BACKEND_URL='):
                            base_url = line.strip().split('=')[1].strip('"\'') + '/api'
                            break
            except Exception as e:
                print(f"Error reading .env file: {str(e)}")
                base_url = "https://0c0559be-4033-4575-aa41-d05f1cf33531.preview.emergentagent.com/api"
        
        self.base_url = base_url
        print(f"üîó Using API base URL: {self.base_url}")
        self.tests_run = 0
        self.tests_passed = 0
        self.created_vacancy_id = None
        self.created_doctor_id = None

    def run_test(self, name, method, endpoint, expected_status, data=None):
        """Run a single API test"""
        url = f"{self.base_url}/{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        self.tests_run += 1
        print(f"\nüîç Testing {name}...")
        print(f"URL: {url}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers)
            elif method == 'DELETE':
                response = requests.delete(url, headers=headers)

            success = response.status_code == expected_status
            if success:
                self.tests_passed += 1
                print(f"‚úÖ Passed - Status: {response.status_code}")
                if response.text:
                    try:
                        json_response = response.json()
                        print(f"Response preview: {json.dumps(json_response, indent=2, ensure_ascii=False)[:300]}...")
                        return success, json_response
                    except:
                        print(f"Response: {response.text[:300]}...")
                        return success, response.text
                return success, {}
            else:
                print(f"‚ùå Failed - Expected {expected_status}, got {response.status_code}")
                if response.text:
                    print(f"Response: {response.text[:300]}...")
                return success, {}

        except Exception as e:
            print(f"‚ùå Failed - Error: {str(e)}")
            return False, {}

    def test_vacancies_api(self):
        """1. –¢–ï–°–¢ API –í–ê–ö–ê–ù–°–ò–ô (–Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
        print("\n" + "="*80)
        print("1Ô∏è‚É£ –¢–ï–°–¢ API –í–ê–ö–ê–ù–°–ò–ô (–Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)")
        print("="*80)
        
        # GET /api/vacancies - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
        print("\nüìã –¢–µ—Å—Ç GET /api/vacancies - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏")
        print("-" * 60)
        success, vacancies_data = self.run_test(
            "GET /api/vacancies - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π",
            "GET",
            "vacancies",
            200
        )
        
        if success and isinstance(vacancies_data, list):
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(vacancies_data)} –≤–∞–∫–∞–Ω—Å–∏–π")
            if len(vacancies_data) > 0:
                vacancy = vacancies_data[0]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
                multilingual_fields = [
                    "title_ru", "title_uz", "title_en",
                    "description_ru", "description_uz", "description_en"
                ]
                missing_fields = [field for field in multilingual_fields if field not in vacancy]
                if not missing_fields:
                    print("‚úÖ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: title_ru/uz/en, description_ru/uz/en")
                    print(f"‚úÖ –ü—Ä–∏–º–µ—Ä: title_ru='{vacancy.get('title_ru', '')}'")
                    print(f"‚úÖ –ü—Ä–∏–º–µ—Ä: title_uz='{vacancy.get('title_uz', '')}'")
                    print(f"‚úÖ –ü—Ä–∏–º–µ—Ä: title_en='{vacancy.get('title_en', '')}'")
                else:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π")
        
        # POST /api/vacancies - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        print("\nüìù –¢–µ—Å—Ç POST /api/vacancies - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏")
        print("-" * 60)
        new_vacancy_data = {
            "title_ru": "–í—Ä–∞—á-–∞–Ω–µ—Å—Ç–µ–∑–∏–æ–ª–æ–≥",
            "title_uz": "Anesteziyolog shifokor",
            "title_en": "Anesthesiologist",
            "description_ru": "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á-–∞–Ω–µ—Å—Ç–µ–∑–∏–æ–ª–æ–≥ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º –±–ª–æ–∫–µ",
            "description_uz": "Operatsiya blokida ishlash uchun tajribali anesteziyolog shifokor kerak",
            "description_en": "Experienced anesthesiologist needed for operating room work",
            "requirements_ru": "–í—ã—Å—à–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∞–Ω–µ—Å—Ç–µ–∑–∏–æ–ª–æ–≥–∏–∏",
            "requirements_uz": "Oliy tibbiy ma'lumot, anesteziyologiya bo'yicha mutaxassislik",
            "requirements_en": "Higher medical education, anesthesiology specialization",
            "salary": "12000000",
            "category_ru": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª",
            "category_uz": "Tibbiy personal",
            "category_en": "Medical Staff",
            "isActive": True
        }
        
        success, create_response = self.run_test(
            "POST /api/vacancies - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏",
            "POST",
            "vacancies",
            200,
            data=new_vacancy_data
        )
        
        if success and "id" in create_response:
            self.created_vacancy_id = create_response["id"]
            print(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {self.created_vacancy_id}")
            print("‚úÖ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏")
        
        # PUT /api/vacancies/{id} - –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        if self.created_vacancy_id:
            print("\n‚úèÔ∏è –¢–µ—Å—Ç PUT /api/vacancies/{id} - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏")
            print("-" * 60)
            update_data = {
                "title_ru": "–°—Ç–∞—Ä—à–∏–π –≤—Ä–∞—á-–∞–Ω–µ—Å—Ç–µ–∑–∏–æ–ª–æ–≥",
                "title_uz": "Katta anesteziyolog shifokor",
                "title_en": "Senior Anesthesiologist",
                "salary": "15000000"
            }
            
            success, update_response = self.run_test(
                f"PUT /api/vacancies/{self.created_vacancy_id} - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
                "PUT",
                f"vacancies/{self.created_vacancy_id}",
                200,
                data=update_data
            )
            
            if success:
                print(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —Å ID {self.created_vacancy_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                print("‚úÖ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏")
        
        # DELETE /api/vacancies/{id} - —É–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
        if self.created_vacancy_id:
            print("\nüóëÔ∏è –¢–µ—Å—Ç DELETE /api/vacancies/{id} - —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
            print("-" * 60)
            success, delete_response = self.run_test(
                f"DELETE /api/vacancies/{self.created_vacancy_id} - —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
                "DELETE",
                f"vacancies/{self.created_vacancy_id}",
                200
            )
            
            if success:
                print(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —Å ID {self.created_vacancy_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏")

    def test_doctors_editing(self):
        """2. –¢–ï–°–¢ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –í–†–ê–ß–ï–ô (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)"""
        print("\n" + "="*80)
        print("2Ô∏è‚É£ –¢–ï–°–¢ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –í–†–ê–ß–ï–ô (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)")
        print("="*80)
        
        # GET /api/doctors - —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Ä–∞—á–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è
        print("\nüë®‚Äç‚öïÔ∏è –¢–µ—Å—Ç GET /api/doctors - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤—Ä–∞—á–µ–π")
        print("-" * 60)
        success, doctors_data = self.run_test(
            "GET /api/doctors - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π",
            "GET",
            "doctors",
            200
        )
        
        if success and isinstance(doctors_data, list):
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(doctors_data)} –≤—Ä–∞—á–µ–π")
            if len(doctors_data) > 0:
                doctor = doctors_data[0]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ["name", "specialization", "email", "phone", "experience"]
                missing_fields = [field for field in required_fields if field not in doctor]
                if not missing_fields:
                    print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: name, specialization, email, phone, experience")
                    print(f"‚úÖ –ü—Ä–∏–º–µ—Ä –≤—Ä–∞—á–∞: {doctor.get('name', '')} - {doctor.get('specialization', '')}")
                    print(f"‚úÖ Email: {doctor.get('email', '')}, Phone: {doctor.get('phone', '')}")
                    print(f"‚úÖ Experience: {doctor.get('experience', '')}")
                else:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                multilingual_fields = ["name_ru", "specialization_ru"]
                present_multilingual = [field for field in multilingual_fields if field in doctor]
                if present_multilingual:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è: {present_multilingual}")
                else:
                    print("‚ÑπÔ∏è –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è name_ru, specialization_ru –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("-" * 60)
        test_doctor_data = {
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π –í—Ä–∞—á –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "specialization": "–ù–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥-—Ç–µ—Å—Ç–µ—Ä",
            "email": "test.edit@neuro.uz",
            "phone": "+998 90 111-22-33",
            "experience": "5+ –ª–µ—Ç",
            "department_id": "1",
            "reception": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞, 10:00-16:00"
        }
        
        success, create_response = self.run_test(
            "POST /api/doctors - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞",
            "POST",
            "doctors",
            200,
            data=test_doctor_data
        )
        
        if success and "id" in create_response:
            self.created_doctor_id = create_response["id"]
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≤—Ä–∞—á —Å–æ–∑–¥–∞–Ω —Å ID: {self.created_doctor_id}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞")
            return
        
        # PUT /api/doctors/{id} - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–∞—á–∞
        print("\n‚úèÔ∏è –¢–µ—Å—Ç PUT /api/doctors/{id} - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–∞—á–∞")
        print("-" * 60)
        edit_data = {
            "name": "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¢–µ—Å—Ç–æ–≤—ã–π –í—Ä–∞—á",
            "specialization": "–°—Ç–∞—Ä—à–∏–π –Ω–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥-—Ç–µ—Å—Ç–µ—Ä",
            "experience": "10+ –ª–µ—Ç",
            "phone": "+998 90 999-88-77"
        }
        
        success, edit_response = self.run_test(
            f"PUT /api/doctors/{self.created_doctor_id} - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–∞—á–∞",
            "PUT",
            f"doctors/{self.created_doctor_id}",
            200,
            data=edit_data
        )
        
        if success:
            print(f"‚úÖ –í—Ä–∞—á —Å ID {self.created_doctor_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            print("-" * 40)
            success, updated_doctors = self.run_test(
                "GET /api/doctors - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                "GET",
                "doctors",
                200
            )
            
            if success and isinstance(updated_doctors, list):
                updated_doctor = next((doc for doc in updated_doctors if doc.get("id") == self.created_doctor_id), None)
                if updated_doctor:
                    if (updated_doctor.get("name") == edit_data["name"] and 
                        updated_doctor.get("specialization") == edit_data["specialization"]):
                        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        print(f"‚úÖ –ù–æ–≤–æ–µ –∏–º—è: {updated_doctor.get('name')}")
                        print(f"‚úÖ –ù–æ–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {updated_doctor.get('specialization')}")
                    else:
                        print("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å")
                else:
                    print("‚ùå –í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–∞—á–∞")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞
        if self.created_doctor_id:
            print("\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞")
            print("-" * 40)
            success, delete_response = self.run_test(
                f"DELETE /api/doctors/{self.created_doctor_id} - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞",
                "DELETE",
                f"doctors/{self.created_doctor_id}",
                200
            )
            
            if success:
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≤—Ä–∞—á —Å ID {self.created_doctor_id} —É–¥–∞–ª–µ–Ω")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞")

    def test_data_structure(self):
        """3. –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•"""
        print("\n" + "="*80)
        print("3Ô∏è‚É£ –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•")
        print("="*80)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π
        print("\nüë®‚Äç‚öïÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π")
        print("-" * 50)
        success, doctors_data = self.run_test(
            "GET /api/doctors - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—Ä–∞—á–µ–π",
            "GET",
            "doctors",
            200
        )
        
        if success and isinstance(doctors_data, list) and len(doctors_data) > 0:
            doctor = doctors_data[0]
            required_doctor_fields = ["name", "specialization", "email", "phone", "experience"]
            
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤—Ä–∞—á–µ–π:")
            all_fields_present = True
            for field in required_doctor_fields:
                if field in doctor:
                    print(f"  ‚úÖ {field}: '{doctor[field]}'")
                else:
                    print(f"  ‚ùå {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    all_fields_present = False
            
            if all_fields_present:
                print("‚úÖ –£ –≤—Ä–∞—á–µ–π –µ—Å—Ç—å –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –ø–æ–ª—è: name, specialization, email, phone, experience")
            else:
                print("‚ùå –£ –≤—Ä–∞—á–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
        print("-" * 50)
        success, vacancies_data = self.run_test(
            "GET /api/vacancies - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π",
            "GET",
            "vacancies",
            200
        )
        
        if success and isinstance(vacancies_data, list) and len(vacancies_data) > 0:
            vacancy = vacancies_data[0]
            required_multilingual_fields = [
                "title_ru", "title_uz", "title_en",
                "description_ru", "description_uz", "description_en"
            ]
            
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è –≤–∞–∫–∞–Ω—Å–∏–π:")
            all_multilingual_present = True
            for field in required_multilingual_fields:
                if field in vacancy:
                    value = vacancy[field][:50] + "..." if len(str(vacancy[field])) > 50 else vacancy[field]
                    print(f"  ‚úÖ {field}: '{value}'")
                else:
                    print(f"  ‚ùå {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    all_multilingual_present = False
            
            if all_multilingual_present:
                print("‚úÖ –£ –≤–∞–∫–∞–Ω—Å–∏–π –µ—Å—Ç—å –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è: title_ru/uz/en, description_ru/uz/en")
            else:
                print("‚ùå –£ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üè• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –î–õ–Ø CRUD –û–ü–ï–†–ê–¶–ò–ô –í –ù–ï–ô–†–û–•–ò–†–£–†–ì–ò–ß–ï–°–ö–û–ú –¶–ï–ù–¢–†–ï")
        print("=" * 90)
        print("–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        print("- –î–æ–±–∞–≤–ª–µ–Ω—ã API endpoints –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π –≤ backend")
        print("- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è startEditDoctor –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π")
        print("- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ VacanciesPage –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –≤ App.js –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è JavaScript –æ—à–∏–±–æ–∫")
        print("=" * 90)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        self.test_vacancies_api()
        self.test_doctors_editing()
        self.test_data_structure()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*90)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        print("="*90)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.tests_run}")
        print(f"–¢–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ: {self.tests_passed}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {(self.tests_passed/self.tests_run*100):.1f}%")
        
        if self.tests_passed == self.tests_run:
            print("\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("‚úÖ API –≤–∞–∫–∞–Ω—Å–∏–π - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
            print("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–∞—á–µ–π - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
            print("‚úÖ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è - –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
        else:
            print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–•")
            failed_tests = self.tests_run - self.tests_passed
            print(f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {failed_tests}")
            print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ backend API")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = VacanciesDoctorsAPITester()
    success = tester.run_all_tests()
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())